require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/products", type: :request do
  # This should return the minimal set of values that should be in the headers
  # in order to pass any filters (e.g. authentication) defined in
  # ProductsController, or in your router and rack
  # middleware. Be sure to keep this updated too.
  let(:valid_headers) {
    { 'Accept' => 'application/json' }
  }

  let!(:product) { create(:product) }

  describe "GET /products" do
    it "returns a successful JSON response with a list of products" do
      get products_url, headers: valid_headers

      expect(response).to have_http_status(:success)
      expect(response.content_type).to include('application/json')
      expect(json_response).to be_an(Array)
      expect(json_response.first['id']).to eq(product.id.to_s)
      expect(json_response.first['name']).to eq(product.name)
    end

    context 'when no products exist' do
      before do
        Product.destroy_all
        get products_url, headers: valid_headers
      end

      it 'returns an empty array' do
        expect(response).to have_http_status(:success)
        expect(json_response).to eq([])
      end
    end

    context 'when a product has price adjustment' do
      let(:product_with_price_adjustment) do
        create(:product, :with_price_adjustments, price_adjustments_count: 1,
          base_price: BigDecimal("800.0"), amount: BigDecimal("900.0"))
      end

      before { product_with_price_adjustment }

      it 'returns a successful JSON response with price adjustment' do
        get products_url, headers: valid_headers
        expect(response).to have_http_status(:success)
        expect(response.content_type).to include('application/json')

        expect(json_response).to be_an(Array)

        expect(json_response.first['id']).to eq(product.id.to_s)
        expect(json_response.first['name']).to eq(product.name)
        expect(json_response.first['id']).to eq(product.id.to_s)

        expect(json_response.last['price']['id']).to eq(product_with_price_adjustment.price_adjustments.first.id.to_s)
        expect(json_response.last['price']['amount']).to eq("900.0")
      end
    end
  end

  describe 'GET /products/:id' do
    context 'when the product exists' do
      it 'returns a successful JSON response' do
        get product_url(product), headers: valid_headers
        expect(response).to have_http_status(:success)
        expect(response.content_type).to include('application/json')

        expect(json_response['id']).to eq(product.id.to_s)
      end

      context 'when product have price adjustment' do
        let(:product) do
          create(:product, :with_price_adjustments, price_adjustments_count: 1,
            base_price: BigDecimal("800.0"), amount: BigDecimal("900.0"))
        end

        it 'returns a successful JSON response with price adjustment' do
          get product_url(product), headers: valid_headers
          expect(response).to have_http_status(:success)
          expect(response.content_type).to include('application/json')

          expect(json_response['id']).to eq(product.id.to_s)
          expect(json_response['price']).to be_a(Hash)
          expect(json_response['price']['id']).to eq(product.price_adjustments.first.id.to_s)
          expect(json_response['price']['amount']).to eq("900.0")
        end
      end
    end

    context 'when the product does not exist' do
      it 'returns a not found JSON error' do
        get product_url(id: 'invalid'), headers: valid_headers
        expect(response).to have_http_status(:not_found)

        expect(json_response).to eq({ 'error' => 'Resource not found' })
      end
    end
  end
end
